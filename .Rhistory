demo()
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(aes(size = qsec, colour = factor(cyl)))
source("~/FirstProject.R", echo=TRUE)
source("~/FirstProject.R", echo=TRUE)
clear
clear
source("~/FirstProject.R", echo=TRUE)
source("~/FirstProject.R", echo=TRUE)
source("~/FirstProject.R", echo=TRUE)
source("~/FirstProject.R", echo=TRUE)
source("~/FirstProject.R", echo=TRUE)
setwd("/Users/noahgallego/Desktop/R Projects")
# 1. Create a character vector with the following elements: "a", "b", "c".
char_vec <- c("a", "b", "c")
class(char_vec) # Check the type of the vector
is.character(char_vec)
# 2. Create a numeric vector with the following elements: 3, 5.7, 8.9.
num_vec <- c(3, 5.7, 8.9)
source("~/Desktop/R Projects/Week 1/math3210.r", echo=TRUE)
# 1. Create a character vector with the following elements: "a", "b", "c".
char_vec <- c("a", "b", "c")
class(char_vec) # Check the type of the vector
is.character(char_vec)
# 2. Create a numeric vector with the following elements: 3, 5.7, 8.9.
num_vec <- c(3, 5.7, 8.9)
class(num_vec) # Check the type of the vector
is.numeric(num_vec)
# 3. Create an integer vector with the following elements: 2L, 4L, 6L.
int_vec <- c(2L, 4L, 6L)
class(int_vec) # Check the type of the vector
is.integer(int_vec) # Verify if the vector is of integer type
# 4. Create a logical vector with the following elements: TRUE, FALSE, TRUE.
log_vec <- c(TRUE, FALSE, TRUE)
class(log_vec) # Check the type of the vector
is.logical(log_vec) # Verify if the vector is of logical type
# 5. Create a complex vector with the following elements: 1+2i, 3+4i.
complex_vec <- c(1+2i, 3+4i)
class(complex_vec) # Check the type of the vector
is.complex(complex_vec) # Verify if the vector is of complex type
help("class")
help("is.logical")
help("numeric")
# 6. Create and manipulate a list.
# Create a list containing a numeric vector, a character vector, and a logical vector.
my_list <- list(
Numbers = c(1, 2, 3, 4, 5),
Characters = c("A", "B", "C", "D", "E"),
Logicals = c(TRUE, FALSE, TRUE, FALSE, TRUE)
)
help("class")
# 6. Create and manipulate a list.
# Create a list containing a numeric vector, a character vector, and a logical vector.
my_list <- list(
Numbers = c(1, 2, 3, 4, 5),
Characters = c("A", "B", "C", "D", "E"),
Logicals = c(TRUE, FALSE, TRUE, FALSE, TRUE)
)
print(my_list) # Display the list
# Access the second element of the "Numbers" vector in the list.
second_number <- my_list$Numbers[2]
print(second_number) # Display the accessed element
# Add a new element to the list containing a vector of complex numbers.
my_list$ComplexNumbers <- c(1+2i, 3+4i, 5+6i)
# 6. Create and manipulate a list.
# Create a list containing a numeric vector, a character vector, and a logical vector.
my_list <- list(
Numbers = c(1, 2, 3, 4, 5),
Characters = c("A", "B", "C", "D", "E"),
Logicals = c(TRUE, FALSE, TRUE, FALSE, TRUE)
)
print(my_list) # Display the list
# Access the second element of the "Numbers" vector in the list.
second_number <- my_list$Numbers[2]
print(second_number) # Display the accessed element
# Add a new element to the list containing a vector of complex numbers.
my_list$ComplexNumbers <- c(1+2i, 3+4i, 5+6i)
help("matrix")
matrix
# 7. Create and manipulate a matrix.
# Create a 3x3 matrix with the numbers 1 to 9.
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)
print(my_matrix) # Display the matrix
# 7. Create and manipulate a matrix.
# Create a 3x3 matrix with the numbers 1 to 9.
my_matrix1 <- matrix(1:9, nrow = 3, ncol = 3, byrow = FALSE)
my_matrix2 <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
my_matrix1
my_matrix2
print(data1.length)
data1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 20 , 40, 50, 55, 80)
# Access the element in the 2nd row and 3rd column.
element_2_3 <- my_matrix[2, 3]
print(element_2_3) # Display the accessed element
# Calculate the column-wise means of the matrix.
col_means <- colMeans(my_matrix)
print(col_means) # Display the column-wise means
class(col_means)
col_means[2]
# 8. Create and manipulate an array.
# Create a 3x3x2 array with the numbers 1 to 18.
my_array <- array(1:18, dim = c(3, 3, 2))
print(my_array) # Display the array
# Access the element in the 3rd row, 2nd column of the 1st matrix.
element_3_2_1 <- my_array[3, 2, 1]
print(element_3_2_1) # Display the accessed element
# Calculate the sum of all elements in the array.
sum_array <- sum(my_array)
print(sum_array) # Display the sum of all elements
# 9. Create and manipulate a data frame.
# Create a data frame with three columns: ID (1 to 5), Name (A to E), and Age (random values).
df <- data.frame(
ID = 1:5,
Name = c("A", "B", "C", "D", "E"),
Age = c(23, 34, 28, 45, 31)
)
View(df)
View(df)
print(df) # Display the data frame
# Add a new column to the data frame for Gender.
df$Gender <- c("M", "F", "M", "F", "M")
print(df) # Display the updated data frame
# Filter the data frame to include only rows where Age is greater than 30.
df_filtered <- df[df$Age > 30, ]
df_filtered1 <- df[df$Gender == "M", 2]
df_filtered1
df_filtered1
df_filtered1 <- df[df$Gender == "M", 1]
df_filtered1
df_filtered1 <- df[df$Gender == "M", ]
df_filtered1
df_filtered1 <- df[df$Gender == "M", 4]
df_filtered1
# 10. Create a numeric vector with both NA and NaN values.
num_vector <- c(1, 2, NA, 4, NaN, 6)
print(num_vector) # Display the vector
# 10. Create a numeric vector with both NA and NaN values.
num_vector <- c(1, 2, NA, 4, NaN, 6)
print(num_vector) # Display the vector
# 2. Check for NA values in the vector using is.na().
na_check <- is.na(num_vector)
print(na_check) # Display TRUE where NA values are present
# 3. Check for NaN values in the vector using is.nan().
nan_check <- is.nan(num_vector)
print(nan_check) # Display TRUE where NaN values are present
# 3. Check for NaN values in the vector using is.nan().
nan_check <- is.nan(num_vector)
print(nan_check) # Display TRUE where NaN values are present
# 4. Count the number of NA and NaN values in the vector.
na_count <- sum(is.na(num_vector))
nan_count <- sum(is.nan(num_vector))
print(paste("Number of NA values:", na_count))   # Display the number of NAs
print(paste("Number of NaN values:", nan_count)) # Display the number of NaNs
# 5. Replace NA values with the mean of the non-missing elements.
mean_value <- mean(num_vector, na.rm = TRUE)
num_vector[is.na(num_vector)] <- mean_value
print(num_vector) # Display the vector after replacing NA
# 6. Replace NaN values with zero.
num_vector[is.nan(num_vector)] <- 0
print(num_vector) # Display the vector after replacing NaN
# Generate Two Random Vectors
set.seed(50)
sensor_reading = sample(0:100, 1440, replace = TRUE)
day_phrases = rep(c("Morning", "Afternoon", "Evening", "Night"), each = 360)
sensor_reading
day_phrases
# Store into DataFrame
df data.frame(sensor_reading, day_phrases)
# Store into DataFrame
df = data.frame(sensor_reading, day_phrases)
df
# Problem 1
help(length)
for (i in 1:10) {
if (i == 6) {
break
}
print(paste("Iteration", i))
}
# Problem 1
i = 0
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
# Problem 1
i = 1
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
print(paste("The first high sensor reading is: ", high_reading))
# Problem 1
i = 1
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
print(paste("The first high sensor reading is:", high_reading, ". At position: ", i))
# Store into DataFrame
df = data.frame(sensor_reading, day_phrases)
df
help(&)
help(and)
help(??and)
help(AND)
help(??AND)
# Problem 2 -- NEED CLARIFICATION
count = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
# Problem 3
num_readings = 0
for (i in 2:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
# Problem 3
num_readings = 0
# Problem 2 -- NEED CLARIFICATION
count = 0
for (i in 2:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
print(paste("The number of readings that are less than 20 and have a value greater than 50 following it is:", count))
# Problem 4
i = 0
while(i < length(day_phases)) {
if (day_phases[i] != "Night") {
print(day_phases[i])
} else {
print("Night has begun. ðŸŒ™")
break
}
i = i + 1
}
# Generate Two Random Vectors
set.seed(50)
sensor_reading = sample(0:100, 1440, replace = TRUE)
day_phases = rep(c("Morning", "Afternoon", "Evening", "Night"), each = 360)
# Store into DataFrame
df = data.frame(sensor_reading, day_phases)
df
# Problem 1
i = 1
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
print(paste("The first high sensor reading is:", high_reading, ". At position: ", i))
# Problem 2 -- NEED CLARIFICATION
count = 0
for (i in 2:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
print(paste("The number of readings that are less than 20 and have a value greater than 50 following it is:", count))
# Problem 3
num_readings = 0
sum = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i] > 20 & sensor_reading[i] < 50) {
num_readings = num_readings + 1
sum = sensor_reading[i] + sum
}
}
average = sum / num_readings
print(paste("The average of values above 20 and below 50 are:", average))
# Problem 4
i = 0
while(i < length(day_phases)) {
if (day_phases[i] != "Night") {
print(day_phases[i])
} else {
print("Night has begun. ðŸŒ™")
break
}
i = i + 1
}
# Problem 4
i = 1
while(i < length(day_phases)) {
if (day_phases[i] != "Night") {
print(day_phases[i])
} else {
print(paste("Night has begun at position", i, ". ðŸŒ™"))
break
}
i = i + 1
}
# Generate Two Random Vectors
set.seed(50)
sensor_reading = sample(0:100, 1440, replace = TRUE)
day_phases = rep(c("Morning", "Afternoon", "Evening", "Night"), each = 360)
# Store into DataFrame
df = data.frame(sensor_reading, day_phases)
df
# Problem 1
i = 1
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
print(paste("The first high sensor reading is:", high_reading, ". At position: ", i))
# Problem 2 -- NEED CLARIFICATION
count = 0
for (i in 2:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
print(paste("The number of readings that are less than 20 and have a value greater than 50 following it is:", count))
# Problem 3
num_readings = 0
sum = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i] > 20 & sensor_reading[i] < 50) {
num_readings = num_readings + 1
sum = sensor_reading[i] + sum
}
}
average = sum / num_readings
print(paste("The average of values above 20 and below 50 are:", average))
# Problem 4
i = 1
while(i < length(day_phases)) {
if (day_phases[i] != "Night") {
print(day_phases[i])
} else {
print(paste("Night has begun at position", i, ". ðŸŒ™"))
break
}
i = i + 1
}
# Problem 3
num_readings = 0
sum = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i] > 20 & sensor_reading[i] < 50) {
num_readings = num_readings + 1
sum = sensor_reading[i] + sum
}
}
average = sum / num_readings
print(paste("The average of values above 20 and below 50 are:", average))
# Problem 3
num_readings = 0
sum = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i] >= 20 & sensor_reading[i] <= 50) {
num_readings = num_readings + 1
sum = sensor_reading[i] + sum
}
}
average = sum / num_readings
print(paste("The average of values above 20 and below 50 are:", average))
# Store into DataFrame
df = data.frame(sensor_reading, day_phases)
df
# Problem 1
i = 1
high_reading = 0
while(i < length(sensor_reading)) {
if (sensor_reading[i] > 80) {
high_reading = sensor_reading[i]
break;
}
i = i + 1
}
print(paste("The first high sensor reading is:", high_reading, ". At position: ", i))
# Problem 2 -- NEED CLARIFICATION
count = 0
for (i in 2:length(sensor_reading)) {
if (sensor_reading[i - 1] < 20 & sensor_reading[i] > 50) {
count = count + 1
}
}
print(paste("The number of readings that are less than 20 and have a value greater than 50 following it is:", count))
# Problem 3
num_readings = 0
sum = 0
for (i in 1:length(sensor_reading)) {
if (sensor_reading[i] >= 20 & sensor_reading[i] <= 50) {
num_readings = num_readings + 1
sum = sensor_reading[i] + sum
}
}
average = sum / num_readings
print(paste("The average of values above 20 and below 50 are:", average))
# Problem 4
i = 1
while(i < length(day_phases)) {
if (day_phases[i] != "Night") {
print(day_phases[i])
} else {
print(paste("Night has begun at position", i, ". ðŸŒ™"))
break
}
i = i + 1
}
